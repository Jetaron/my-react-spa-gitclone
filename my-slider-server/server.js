// server.js (в папці my-slider-server)

console.log("Початок виконання server.js..."); // Додатковий лог для перевірки запуску

// Імпортуємо необхідні модулі
const express = require('express');
const http = require('http');
const { Server } = require("socket.io"); // Правильний імпорт для socket.io v3+

// Створюємо Express додаток
const app = express();
// Створюємо HTTP сервер на основі Express додатка
const httpServer = http.createServer(app);

// Налаштовуємо Socket.IO сервер
// Важливо налаштувати CORS, щоб дозволити з'єднання з клієнта (який працює на іншому порті)
const io = new Server(httpServer, {
  cors: {
    origin: "http://localhost:3000", // Вказуємо URL нашого React клієнта
    methods: ["GET", "POST"]         // Дозволені HTTP методи
  }
});

// Визначаємо порт, на якому буде працювати сервер
const PORT = process.env.PORT || 4000; // Використовуємо змінну середовища PORT або 4000 за замовчуванням

console.log(`Намагаємося запустити сервер на порті ${PORT}...`);

// Обробник події 'connection' - спрацьовує, коли новий клієнт підключається через WebSocket
io.on('connection', (socket) => {
  // socket - це об'єкт, що представляє конкретне з'єднання з клієнтом
  console.log(`Клієнт успішно підключився! ID сокета: ${socket.id}`);

  // Обробник події 'sliderChange' від клієнта
  // Коли клієнт надсилає цю подію (змінюючи значення слайдера), цей код виконується
  socket.on('sliderChange', (value) => {
    console.log(`Отримано 'sliderChange' від клієнта ${socket.id}. Нове значення: ${value}`);

    // Розсилаємо (бродкастимо) отримане значення ВСІМ ІНШИМ підключеним клієнтам
    // Подія, яку ми надсилаємо іншим, називається 'sliderUpdate'
    // socket.broadcast.emit не надсилає подію тому клієнту, який її ініціював,
    // що допомагає уникнути нескінченних циклів.
    socket.broadcast.emit('sliderUpdate', value);
    console.log(`Надіслано 'sliderUpdate' з значенням ${value} усім іншим клієнтам.`);
  });

  // Обробник події 'disconnect' - спрацьовує, коли клієнт відключається
  socket.on('disconnect', () => {
    console.log(`Клієнт відключився. ID сокета: ${socket.id}`);
  });

  // Можна додати обробник помилок для сокета, якщо потрібно
  socket.on('error', (error) => {
    console.error(`Помилка сокета ${socket.id}:`, error);
  });
});

// Запускаємо HTTP сервер, щоб він почав слухати вхідні з'єднання на вказаному порті
httpServer.listen(PORT, () => {
  // Ця функція зворотного виклику виконається, коли сервер успішно запуститься
  console.log(`+++++++++++++++++++++++++++++++++++++++++++++++++++++`);
  console.log(` Сервер Socket.IO успішно запущено! `);
  console.log(` Слухаємо на порті: ${PORT} `);
  console.log(` Чекаємо на підключення клієнтів з http://localhost:3000 `);
  console.log(`+++++++++++++++++++++++++++++++++++++++++++++++++++++`);
});

// Додатковий лог в кінці файлу для перевірки, що інтерпретатор дійшов сюди
console.log("Кінець файлу server.js досягнуто (перед запуском сервера).");